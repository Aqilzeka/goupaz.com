{"ast":null,"code":"import _slicedToArray from \"/Users/sako/projects/goupaz/goupaz.com/community/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sako/projects/goupaz/goupaz.com/community/src/components/Map.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { countriesWithNumOfDevsObj } from \"../util/UsersDataCleanup\"; // Array of country names and number of devs in those countries\n\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\n\nvar countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj);\nvar centerLatLngArr = [];\n\nfunction SimpleMap(_ref) {\n  var _this = this;\n\n  var _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 3 : _ref$zoom;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allCountriesLatLang = _useState2[0],\n      setAllCountriesLatLang = _useState2[1];\n\n  useEffect(function () {\n    // If the user goes back to home before map has loaded, the Map component will unmount\n    // but since fetch cannot be cancelled, react will try to setSate on an unmounted component\n    // when the fetch Promise resolves\n    // This throws memory leak error so isComponentSubscribedToPromise is used as a flag\n    // to check if the component was unmounted before setting state\n    // and setAllCountriesLatLang is not called if Map component has unmounted\n    var isComponentSubscribedToPromise = true;\n\n    if (isComponentSubscribedToPromise) {\n      fetch(\"https://restcountries.eu/rest/v2/all\").then(function (resp) {\n        return resp.json();\n      }).then(function (data) {\n        if (isComponentSubscribedToPromise) setAllCountriesLatLang(data);\n      }).catch(function (err) {\n        return console.error(err);\n      });\n    }\n\n    return function () {\n      isComponentSubscribedToPromise = false;\n    };\n  }, []);\n  var countriesLatLngArr = allCountriesLatLang.map(function (_ref2) {\n    var name = _ref2.name,\n        latlng = _ref2.latlng;\n    return {\n      name,\n      latlng\n    };\n  });\n  /* \n  Made separate variable for UK because name of UK in API is \"United Kingdom \n  of Great Britain and Northern Ireland\" which probably none of the users will use\n  */\n\n  var UK = {\n    country: \"United Kingdom\",\n    latlng: [54, -2],\n    // copied from API\n    numberOfDevs: countriesWithNumOfDevsObj[\"United Kingdom\"]\n  }; // Two nested for loops are okay as array items will always be < 250 in both arrays\n\n  var finalArrayWithCountryAndLatLng = [];\n\n  function finalCountryAndLocationArray() {\n    for (var i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (var j = 0; j < countriesLatLngArr.length; j++) {\n        if (countryNamesAndNumOfDevsArr[i][0].toLowerCase() === countriesLatLngArr[j].name.toLowerCase()) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countryNamesAndNumOfDevsArr[i][0],\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1]\n          });\n        }\n      }\n    } // Add UK to final array of countries and co-ordinates\n\n\n    finalArrayWithCountryAndLatLng.push(UK);\n    return finalArrayWithCountryAndLatLng;\n  }\n\n  finalCountryAndLocationArray(); // console.log(finalArrayWithCountryAndLatLng);\n  // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n  // Might need it to check for unexpected repeated entries which is easier with sorted countries\n\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  var markersArray = finalArrayWithCountryAndLatLng.map(function (_ref3) {\n    var country = _ref3.country,\n        latlng = _ref3.latlng,\n        numberOfDevs = _ref3.numberOfDevs;\n    return /*#__PURE__*/React.createElement(Marker, {\n      key: country,\n      position: [latlng[0], latlng[1]],\n      color: \"royalblue\",\n      title: numberOfDevs === 1 ? numberOfDevs + \" Developer from \" + country : numberOfDevs + \" Developers from \" + country,\n      text: numberOfDevs,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, numberOfDevs === 1 ? numberOfDevs + \" Developer from \" + country : numberOfDevs + \" Developers from \" + country));\n  });\n  var center = centerLatLngArr.length > 0 ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng] : [55.378052, -3.435973];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"90vh\",\n      width: \"100%\",\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LeafletMap, {\n    center: center,\n    zoom: zoom,\n    minZoom: 1,\n    maxZoom: 10,\n    attributionControl: true,\n    zoomControl: true,\n    doubleClickZoom: true,\n    scrollWheelZoom: true,\n    dragging: true,\n    animate: true,\n    easeLinearity: 0.35,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    attribution: \"&copy <a href=\\\"https://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n    url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), markersArray));\n}\n\nexport default SimpleMap;","map":{"version":3,"sources":["/Users/sako/projects/goupaz/goupaz.com/community/src/components/Map.tsx"],"names":["React","useEffect","useState","Map","LeafletMap","Marker","Popup","TileLayer","countriesWithNumOfDevsObj","countryNamesAndNumOfDevsArr","Object","entries","centerLatLngArr","SimpleMap","zoom","allCountriesLatLang","setAllCountriesLatLang","isComponentSubscribedToPromise","fetch","then","resp","json","data","catch","err","console","error","countriesLatLngArr","map","name","latlng","UK","country","numberOfDevs","finalArrayWithCountryAndLatLng","finalCountryAndLocationArray","i","length","j","toLowerCase","push","markersArray","center","lat","lng","height","width","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Map as LeafletMap, Marker, Popup, TileLayer } from \"react-leaflet\"\n\nimport { countriesWithNumOfDevsObj } from \"../util/UsersDataCleanup\"\n\n// Array of country names and number of devs in those countries\n/* Needed to match country names from countriesWithNumOfDevsObj against \ncountry names fetched from API to get their latitude and longitude for markers */\nconst countryNamesAndNumOfDevsArr = Object.entries(countriesWithNumOfDevsObj)\n\nlet centerLatLngArr: any = []\n\nfunction SimpleMap({ zoom = 3 }) {\n  const [allCountriesLatLang, setAllCountriesLatLang] = useState([])\n  useEffect(() => {\n    // If the user goes back to home before map has loaded, the Map component will unmount\n    // but since fetch cannot be cancelled, react will try to setSate on an unmounted component\n    // when the fetch Promise resolves\n    // This throws memory leak error so isComponentSubscribedToPromise is used as a flag\n    // to check if the component was unmounted before setting state\n    // and setAllCountriesLatLang is not called if Map component has unmounted\n    let isComponentSubscribedToPromise = true\n    if (isComponentSubscribedToPromise) {\n      fetch(`https://restcountries.eu/rest/v2/all`)\n        .then((resp) => resp.json())\n        .then((data) => {\n          if (isComponentSubscribedToPromise) setAllCountriesLatLang(data)\n        })\n        .catch((err) => console.error(err))\n    }\n    return () => {\n      isComponentSubscribedToPromise = false\n    }\n  }, [])\n\n  let countriesLatLngArr: any = allCountriesLatLang.map(({ name, latlng }) => ({\n    name,\n    latlng,\n  }))\n\n  /* \n  Made separate variable for UK because name of UK in API is \"United Kingdom \n  of Great Britain and Northern Ireland\" which probably none of the users will use\n  */\n  const UK = {\n    country: \"United Kingdom\",\n    latlng: [54, -2], // copied from API\n    numberOfDevs: countriesWithNumOfDevsObj[\"United Kingdom\"],\n  }\n\n  // Two nested for loops are okay as array items will always be < 250 in both arrays\n  let finalArrayWithCountryAndLatLng: any = []\n  function finalCountryAndLocationArray() {\n    for (let i = 0; i < countryNamesAndNumOfDevsArr.length; i++) {\n      for (let j = 0; j < countriesLatLngArr.length; j++) {\n        if (\n          countryNamesAndNumOfDevsArr[i][0].toLowerCase() ===\n          countriesLatLngArr[j].name.toLowerCase()\n        ) {\n          finalArrayWithCountryAndLatLng.push({\n            country: countryNamesAndNumOfDevsArr[i][0],\n            latlng: countriesLatLngArr[j].latlng,\n            numberOfDevs: countryNamesAndNumOfDevsArr[i][1],\n          })\n        }\n      }\n    }\n    // Add UK to final array of countries and co-ordinates\n    finalArrayWithCountryAndLatLng.push(UK)\n    return finalArrayWithCountryAndLatLng\n  }\n  finalCountryAndLocationArray()\n  // console.log(finalArrayWithCountryAndLatLng);\n\n  // DO NOT DELETE THIS COMMENTED OUT CODE BELOW\n  // Might need it to check for unexpected repeated entries which is easier with sorted countries\n  /*\n  let sorterFunction = finalArrayWithCountryAndLatLng.sort(function(a, b) {\n    var nameA = a.country.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.country.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n      return -1;\n    }\n    if (nameA > nameB) {\n      return 1;\n    }\n    // names must be equal\n    return 0;\n  });\n  console.log(sorterFunction);\n  */\n\n  const markersArray = finalArrayWithCountryAndLatLng.map(\n    ({ country, latlng, numberOfDevs }: any) => {\n      return (\n        <Marker\n          key={country}\n          position={[latlng[0], latlng[1]]}\n          color=\"royalblue\"\n          title={\n            numberOfDevs === 1\n              ? numberOfDevs + \" Developer from \" + country\n              : numberOfDevs + \" Developers from \" + country\n          }\n          text={numberOfDevs}\n        >\n          <Popup>\n            {numberOfDevs === 1\n              ? numberOfDevs + \" Developer from \" + country\n              : numberOfDevs + \" Developers from \" + country}\n          </Popup>\n        </Marker>\n      )\n    }\n  )\n\n  const center: any =\n    centerLatLngArr.length > 0\n      ? [centerLatLngArr[0].lat, centerLatLngArr[0].lng]\n      : [55.378052, -3.435973]\n\n  return (\n    <div style={{ height: \"90vh\", width: \"100%\", margin: 0 }}>\n      <LeafletMap\n        center={center}\n        zoom={zoom}\n        minZoom={1}\n        maxZoom={10}\n        attributionControl={true}\n        zoomControl={true}\n        doubleClickZoom={true}\n        scrollWheelZoom={true}\n        dragging={true}\n        animate={true}\n        easeLinearity={0.35}\n      >\n        <TileLayer\n          attribution='&amp;copy <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {markersArray}\n      </LeafletMap>\n    </div>\n  )\n}\n\nexport default SimpleMap\n"]},"metadata":{},"sourceType":"module"}