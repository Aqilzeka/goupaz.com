{"ast":null,"code":"import { data } from \"../assets/persons.js\";\n/* CLEAN UP THE persons.json DATA TO MAKE IT EASIER \nTO MAKE FETCH REQUESTS FOR COUNTRIES AND COORDINATES \n(LATITUDE, LONGITUDE) AND COMPARE AND MATCH THEM */\n\nvar people = data.people; // Using uuid for the person id\n// const normalizeIDs = () => {\n//   people.forEach((person: Person, index: number) => {\n//     person.id = index + 1\n//   })\n// }\n// normalizeIDs()\n// Removed all the brackets, extra spaces, symbols and unnecessary stuff from country names\n\nvar allCountryNamesCleaned = people.map(function (person) {\n  var _person$location$coun;\n\n  return (_person$location$coun = person.location.country //removes brackets and everything inside brackets.\n  // lot of people have added (Available for remote work) or similar in brackets\n  ) === null || _person$location$coun === void 0 ? void 0 : _person$location$coun.replace(/ *\\([^)]*\\) */g, \"\") // removes anything other than alphabets and latin/other letters éáíúçèk stuff\n  .replace(/[^A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff\\s]+/g, \"\") // replaces 2 or more whitespaces with one\n  .replace(/  +/g, \" \").trim() // .toLowerCase()\n  ;\n}); // Used switch to fix country names to get proper country latitude and longitude\n// TODO: But some strict rules should be made for adding country names so that this wont be necessary\n// And whoever merges pull requests for adding new users should make sure the data is clean before merging\n// This will contain duplicate country names\n// that are removed in the next function - removeDuplicateCountryNames\n\nvar allCountryNamesFixedToMatchAPINames = allCountryNamesCleaned.map(function (country) {\n  switch (country) {\n    case \"US\":\n      return \"United States of America\";\n\n    case \"USA\":\n      return \"United States of America\";\n\n    case \"United States\":\n      return \"United States of America\";\n\n    case \"United States Of America\":\n      return \"United States of America\";\n\n    case \"UAE\":\n      return \"United Arab Emirates\";\n\n    case \"UK\":\n      return \"United Kingdom\";\n\n    case \"INDIA\":\n      return \"India\";\n\n    case \"IN\":\n      return \"India\";\n\n    case \"RU\":\n      return \"Russian Federation\";\n\n    case \"Russia\":\n      return \"Russian Federation\";\n\n    case \"CH\":\n      return \"China\";\n\n    case \"Perú\":\n      return \"Peru\";\n\n    case \"SriLanka\":\n      return \"Sri Lanka\";\n\n    case \"NIGERIA\":\n      return \"Nigeria\";\n\n    default:\n      return country;\n  }\n}); // This function will return an object with country name and the number of developers from that country\n// It adds the number of developers as it comes across duplicate country names\n\nfunction removeDuplicateCountryNames(countryArrayWithDuplicateValues) {\n  var deduplicatedCountries = countryArrayWithDuplicateValues.reduce(function (prev, curr) {\n    // console.log(\"prev\", prev, \"current\", curr);\n    prev[curr] = (prev[curr] || 0) + 1;\n    return prev;\n  }, {});\n  return deduplicatedCountries;\n}\n\nexport var countriesWithNumOfDevsObj = removeDuplicateCountryNames(allCountryNamesFixedToMatchAPINames);","map":{"version":3,"sources":["/Users/sako/projects/goupaz/goupaz.com/community/src/util/UsersDataCleanup.tsx"],"names":["data","people","allCountryNamesCleaned","map","person","location","country","replace","trim","allCountryNamesFixedToMatchAPINames","removeDuplicateCountryNames","countryArrayWithDuplicateValues","deduplicatedCountries","reduce","prev","curr","countriesWithNumOfDevsObj"],"mappings":"AAAA,SAASA,IAAT,QAAqB,sBAArB;AACA;;;;AAMA,IAAMC,MAAW,GAAGD,IAAI,CAACC,MAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA,IAAMC,sBAAsB,GAAGD,MAAM,CAACE,GAAP,CAAW,UAACC,MAAD,EAAoB;AAAA;;AAC5D,kCACEA,MAAM,CAACC,QAAP,CAAgBC,OADlB,CAEI;AACA;AAHJ,4DACE,sBAGIC,OAHJ,CAGY,gBAHZ,EAG8B,EAH9B,EAIE;AAJF,GAKGA,OALH,CAKW,sDALX,EAKmE,EALnE,EAME;AANF,GAOGA,OAPH,CAOW,MAPX,EAOmB,GAPnB,EAQGC,IARH,EADF,CAUE;AAVF;AAYD,CAb8B,CAA/B,C,CAeA;AACA;AACA;AAEA;AACA;;AACA,IAAMC,mCAAmC,GAAGP,sBAAsB,CAACC,GAAvB,CAC1C,UAACG,OAAD,EAAkB;AAChB,UAAQA,OAAR;AACE,SAAK,IAAL;AACE,aAAO,0BAAP;;AACF,SAAK,KAAL;AACE,aAAO,0BAAP;;AACF,SAAK,eAAL;AACE,aAAO,0BAAP;;AACF,SAAK,0BAAL;AACE,aAAO,0BAAP;;AACF,SAAK,KAAL;AACE,aAAO,sBAAP;;AACF,SAAK,IAAL;AACE,aAAO,gBAAP;;AACF,SAAK,OAAL;AACE,aAAO,OAAP;;AACF,SAAK,IAAL;AACE,aAAO,OAAP;;AACF,SAAK,IAAL;AACE,aAAO,oBAAP;;AACF,SAAK,QAAL;AACE,aAAO,oBAAP;;AACF,SAAK,IAAL;AACE,aAAO,OAAP;;AACF,SAAK,MAAL;AACE,aAAO,MAAP;;AACF,SAAK,UAAL;AACE,aAAO,WAAP;;AACF,SAAK,SAAL;AACE,aAAO,SAAP;;AACF;AACE,aAAOA,OAAP;AA9BJ;AAgCD,CAlCyC,CAA5C,C,CAqCA;AACA;;AAEA,SAASI,2BAAT,CAAqCC,+BAArC,EAA2E;AACzE,MAAIC,qBAAqB,GAAGD,+BAA+B,CAACE,MAAhC,CAC1B,UAACC,IAAD,EAAYC,IAAZ,EAA0B;AACxB;AACAD,IAAAA,IAAI,CAACC,IAAD,CAAJ,GAAa,CAACD,IAAI,CAACC,IAAD,CAAJ,IAAc,CAAf,IAAoB,CAAjC;AACA,WAAOD,IAAP;AACD,GALyB,EAM1B,EAN0B,CAA5B;AASA,SAAOF,qBAAP;AACD;;AACD,OAAO,IAAMI,yBAAyB,GAAGN,2BAA2B,CAClED,mCADkE,CAA7D","sourcesContent":["import { data } from \"../assets/persons.js\"\n/* CLEAN UP THE persons.json DATA TO MAKE IT EASIER \nTO MAKE FETCH REQUESTS FOR COUNTRIES AND COORDINATES \n(LATITUDE, LONGITUDE) AND COMPARE AND MATCH THEM */\n\nimport Person from \"../interfaces/person\"\n\nconst people: any = data.people\n\n// Using uuid for the person id\n// const normalizeIDs = () => {\n//   people.forEach((person: Person, index: number) => {\n//     person.id = index + 1\n//   })\n// }\n\n// normalizeIDs()\n\n// Removed all the brackets, extra spaces, symbols and unnecessary stuff from country names\nconst allCountryNamesCleaned = people.map((person: Person) => {\n  return (\n    person.location.country\n      //removes brackets and everything inside brackets.\n      // lot of people have added (Available for remote work) or similar in brackets\n      ?.replace(/ *\\([^)]*\\) */g, \"\")\n      // removes anything other than alphabets and latin/other letters éáíúçèk stuff\n      .replace(/[^A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00f6\\u00f8-\\u00ff\\s]+/g, \"\")\n      // replaces 2 or more whitespaces with one\n      .replace(/  +/g, \" \")\n      .trim()\n    // .toLowerCase()\n  )\n})\n\n// Used switch to fix country names to get proper country latitude and longitude\n// TODO: But some strict rules should be made for adding country names so that this wont be necessary\n// And whoever merges pull requests for adding new users should make sure the data is clean before merging\n\n// This will contain duplicate country names\n// that are removed in the next function - removeDuplicateCountryNames\nconst allCountryNamesFixedToMatchAPINames = allCountryNamesCleaned.map(\n  (country: any) => {\n    switch (country) {\n      case \"US\":\n        return \"United States of America\"\n      case \"USA\":\n        return \"United States of America\"\n      case \"United States\":\n        return \"United States of America\"\n      case \"United States Of America\":\n        return \"United States of America\"\n      case \"UAE\":\n        return \"United Arab Emirates\"\n      case \"UK\":\n        return \"United Kingdom\"\n      case \"INDIA\":\n        return \"India\"\n      case \"IN\":\n        return \"India\"\n      case \"RU\":\n        return \"Russian Federation\"\n      case \"Russia\":\n        return \"Russian Federation\"\n      case \"CH\":\n        return \"China\"\n      case \"Perú\":\n        return \"Peru\"\n      case \"SriLanka\":\n        return \"Sri Lanka\"\n      case \"NIGERIA\":\n        return \"Nigeria\"\n      default:\n        return country\n    }\n  }\n)\n\n// This function will return an object with country name and the number of developers from that country\n// It adds the number of developers as it comes across duplicate country names\n\nfunction removeDuplicateCountryNames(countryArrayWithDuplicateValues: any) {\n  let deduplicatedCountries = countryArrayWithDuplicateValues.reduce(\n    (prev: any, curr: any) => {\n      // console.log(\"prev\", prev, \"current\", curr);\n      prev[curr] = (prev[curr] || 0) + 1\n      return prev\n    },\n    {}\n  )\n\n  return deduplicatedCountries\n}\nexport const countriesWithNumOfDevsObj = removeDuplicateCountryNames(\n  allCountryNamesFixedToMatchAPINames\n)\n"]},"metadata":{},"sourceType":"module"}