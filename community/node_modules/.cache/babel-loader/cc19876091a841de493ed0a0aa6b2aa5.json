{"ast":null,"code":"//Durstenfeld shuffle algorithm, a computer-optimized version of Fisher-Yates\n//algorithm works by picking one random element for each original array element, and then //excluding it from the next draw. swapping the picked element with the current element, ///and then picking the next random element from the remainder.\n//note: shuffle function is not pure function, it mutates original array\n//in order to avoid memory duplication\nexport var shuffle = function shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array.length;\n};","map":{"version":3,"sources":["/Users/sako/projects/goupaz/goupaz.com/community/src/util/shuffle.tsx"],"names":["shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAgB;AACrC,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAiCC,cAAjC;AAAA,MAAiDC,WAAjD,CADqC,CAGrC;;AACA,SAAO,MAAMH,YAAb,EAA2B;AAEzB;AACAG,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB,CAJyB,CAMzB;;AACAE,IAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,IAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,IAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,SAAOH,KAAK,CAACE,MAAb;AACD,CAjBM","sourcesContent":["//Durstenfeld shuffle algorithm, a computer-optimized version of Fisher-Yates\n//algorithm works by picking one random element for each original array element, and then //excluding it from the next draw. swapping the picked element with the current element, ///and then picking the next random element from the remainder.\n//note: shuffle function is not pure function, it mutates original array\n//in order to avoid memory duplication\nexport const shuffle = (array: any) => {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array.length;\n}"]},"metadata":{},"sourceType":"module"}